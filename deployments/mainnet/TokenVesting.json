{
  "address": "0x33e2790c7FE3663784997D695C75A86A154E81EB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hsf_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingBegin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingCliff_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingEnd_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hsf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "setRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingBegin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingCliff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9507f5a24e91a02ddfeb5fc197c2eac01bf1c58c6895a398981925b9aba1538",
  "receipt": {
    "to": null,
    "from": "0x59803c06151A10A879B1d9F49E5a5603cD3ea203",
    "contractAddress": "0x33e2790c7FE3663784997D695C75A86A154E81EB",
    "transactionIndex": 125,
    "gasUsed": "483777",
    "logsBloom": "0x
    "blockHash": "0x41d0b5339685fe74a398baa0a92c1f97607ef6efccfd1a27809ed22c2ec7fc8f",
    "transactionHash": "0xb9507f5a24e91a02ddfeb5fc197c2eac01bf1c58c6895a398981925b9aba1538",
    "logs": [],
    "blockNumber": 13048754,
    "cumulativeGasUsed": "8048765",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xba6b0dbb2ba8daa8f5d6817946393aef8d3a4487",
    "0x531994a404cAFAbA3100e299E4b9DC476F2047Bd",
    "5000000000000000000000000",
    1692370800,
    1692370800,
    1744988400
  ],
  "solcInputHash": "88e3ee8caa9eddd2b888a142f4ac43f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hsf_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hsf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVesting.sol\":\"TokenVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/TokenVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract TokenVesting {\\n    using SafeMath for uint;\\n    \\n    address public hsf;\\n    address public recipient;\\n    uint public vestingAmount;\\n    uint public vestingBegin;\\n    uint public vestingCliff;\\n    uint public vestingEnd;\\n\\n    uint public lastUpdate;\\n    \\n    event TokenClaimed(uint amount);\\n\\n    constructor(\\n        address hsf_,\\n        address recipient_,\\n        uint vestingAmount_,\\n        uint vestingBegin_,\\n        uint vestingCliff_,\\n        uint vestingEnd_\\n    ) {\\n        require(vestingBegin_ >= block.timestamp, 'TokenVesting::constructor: vesting begin too early');\\n        require(vestingCliff_ >= vestingBegin_, 'TokenVesting::constructor: cliff is too early');\\n        require(vestingEnd_ > vestingCliff_, 'TokenVesting::constructor: end is too early');\\n\\n        hsf = hsf_;\\n        recipient = recipient_;\\n\\n        vestingAmount = vestingAmount_;\\n        vestingBegin = vestingBegin_;\\n        vestingCliff = vestingCliff_;\\n        vestingEnd = vestingEnd_;\\n        lastUpdate = vestingBegin;\\n    }\\n\\n    function setRecipient(address recipient_) public {\\n        require(msg.sender == recipient, 'TokenVesting::setRecipient: unauthorized');\\n        recipient = recipient_;\\n    }\\n\\n    function claim() public {\\n        require(block.timestamp >= vestingCliff, 'TokenVesting::claim: not time yet');\\n        uint amount;\\n        if (block.timestamp >= vestingEnd) {\\n            amount = IHsf(hsf).balanceOf(address(this));\\n        } else {\\n            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\\n            lastUpdate = block.timestamp;\\n        }\\n        IHsf(hsf).transfer(recipient, amount);\\n        emit TokenClaimed(amount);\\n    }\\n}\\n\\ninterface IHsf {\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address _to, uint _value) external returns (bool);\\n}\",\"keccak256\":\"0x2a844c6ffdfcfa85977afbd4abefbe693e96942bb7f594cb982b0d7d982529e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161070438038061070483398101604081905261002f916101d0565b4283101561009f5760405162461bcd60e51b815260206004820152603260248201527f546f6b656e56657374696e673a3a636f6e7374727563746f723a2076657374696044820152716e6720626567696e20746f6f206561726c7960701b60648201526084015b60405180910390fd5b828210156101055760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e56657374696e673a3a636f6e7374727563746f723a20636c69666660448201526c20697320746f6f206561726c7960981b6064820152608401610096565b8181116101685760405162461bcd60e51b815260206004820152602b60248201527f546f6b656e56657374696e673a3a636f6e7374727563746f723a20656e64206960448201526a7320746f6f206561726c7960a81b6064820152608401610096565b600080546001600160a01b039788166001600160a01b03199182161790915560018054969097169516949094179094556002919091556003819055600492909255600555600655610228565b80516001600160a01b03811681146101cb57600080fd5b919050565b60008060008060008060c087890312156101e957600080fd5b6101f2876101b4565b9550610200602088016101b4565b945060408701519350606087015192506080870151915060a087015190509295509295509295565b6104cd806102376000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c806366d003ac1161006657806366d003ac146100fb57806384a1931f1461010e578063c046371114610117578063e29bc68b14610120578063f3640e741461012957600080fd5b8062728f76146100975780633bbed4a0146100b357806344288f81146100c85780634e71d92d146100f3575b600080fd5b6100a060025481565b6040519081526020015b60405180910390f35b6100c66100c13660046103c5565b610132565b005b6000546100db906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b6100c66101c4565b6001546100db906001600160a01b031681565b6100a060055481565b6100a060065481565b6100a060035481565b6100a060045481565b6001546001600160a01b031633146101a25760405162461bcd60e51b815260206004820152602860248201527f546f6b656e56657374696e673a3a736574526563697069656e743a20756e61756044820152671d1a1bdc9a5e995960c21b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6004544210156102205760405162461bcd60e51b815260206004820152602160248201527f546f6b656e56657374696e673a3a636c61696d3a206e6f742074696d652079656044820152601d60fa1b6064820152608401610199565b600060055442106102ad576000546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561026e57600080fd5b505afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610410565b90506102e7565b6102e06003546005546102c0919061046a565b6102da600654426102d1919061046a565b600254906103a6565b906103b9565b4260065590505b60005460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f91906103ee565b506040518181527f97212d5af6cf1ddbeedea7e5f9a18970d2dde6bcc4583898856a241144c4877f9060200160405180910390a150565b60006103b2828461044b565b9392505050565b60006103b28284610429565b6000602082840312156103d757600080fd5b81356001600160a01b03811681146103b257600080fd5b60006020828403121561040057600080fd5b815180151581146103b257600080fd5b60006020828403121561042257600080fd5b5051919050565b60008261044657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561046557610465610481565b500290565b60008282101561047c5761047c610481565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122077b6114fb5e42cda0a81e176d7e209d5801e7c9cdca73cdf32298717d57a810f64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100925760003560e01c806366d003ac1161006657806366d003ac146100fb57806384a1931f1461010e578063c046371114610117578063e29bc68b14610120578063f3640e741461012957600080fd5b8062728f76146100975780633bbed4a0146100b357806344288f81146100c85780634e71d92d146100f3575b600080fd5b6100a060025481565b6040519081526020015b60405180910390f35b6100c66100c13660046103c5565b610132565b005b6000546100db906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b6100c66101c4565b6001546100db906001600160a01b031681565b6100a060055481565b6100a060065481565b6100a060035481565b6100a060045481565b6001546001600160a01b031633146101a25760405162461bcd60e51b815260206004820152602860248201527f546f6b656e56657374696e673a3a736574526563697069656e743a20756e61756044820152671d1a1bdc9a5e995960c21b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6004544210156102205760405162461bcd60e51b815260206004820152602160248201527f546f6b656e56657374696e673a3a636c61696d3a206e6f742074696d652079656044820152601d60fa1b6064820152608401610199565b600060055442106102ad576000546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561026e57600080fd5b505afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610410565b90506102e7565b6102e06003546005546102c0919061046a565b6102da600654426102d1919061046a565b600254906103a6565b906103b9565b4260065590505b60005460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f91906103ee565b506040518181527f97212d5af6cf1ddbeedea7e5f9a18970d2dde6bcc4583898856a241144c4877f9060200160405180910390a150565b60006103b2828461044b565b9392505050565b60006103b28284610429565b6000602082840312156103d757600080fd5b81356001600160a01b03811681146103b257600080fd5b60006020828403121561040057600080fd5b815180151581146103b257600080fd5b60006020828403121561042257600080fd5b5051919050565b60008261044657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561046557610465610481565b500290565b60008282101561047c5761047c610481565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122077b6114fb5e42cda0a81e176d7e209d5801e7c9cdca73cdf32298717d57a810f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1213,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "hsf",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1215,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "recipient",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1217,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1219,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingBegin",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1221,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingCliff",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1223,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingEnd",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1225,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}