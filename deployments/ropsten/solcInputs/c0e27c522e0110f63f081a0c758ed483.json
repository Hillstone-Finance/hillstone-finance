{
  "language": "Solidity",
  "sources": {
    "contracts/HillstoneFinance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract BlackList is Ownable, ERC20 {\n\n    mapping (address => bool) public isBlackListed;\n\n    function getBlackListStatus(address _addr) external view returns (bool) {\n        return isBlackListed[_addr];\n    }\n    \n    function addBlackList (address _addr) public onlyOwner {\n        isBlackListed[_addr] = true;\n        emit AddedBlackList(_addr);\n    }\n\n    function removeBlackList (address _addr) public onlyOwner {\n        isBlackListed[_addr] = false;\n        emit RemovedBlackList(_addr);\n    }\n\n    event AddedBlackList(address _user);\n\n    event RemovedBlackList(address _user);\n\n}\n\ncontract HillstoneFinance is ERC20, BlackList {\n\n    using SafeMath for uint256;\n    uint256 constant private _initial_supply = 10**26;\n\n    constructor() ERC20(\"Hillstone.Finance\", \"HSF\") {\n        _mint(msg.sender, _initial_supply);\n    }\n\n    function transfer(address _to, uint _value) public override returns (bool success) {\n        require(!isBlackListed[msg.sender], \"HSF/transfer: Should not transfer from blacklisted address\");\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public override returns (bool success) {\n        require(!isBlackListed[_from], \"HSF/transferFrom: Should not transfer from blacklisted address\");\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/InvestorV1Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IInvestorV1Pool.sol\";\nimport \"./interfaces/IInvestorV1PoolDeployer.sol\";\n\ncontract InvestorV1Pool is IInvestorV1Pool {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public constant HSF = 0x10701139142CF9812DEb4792D2aE2733d47F5708;\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    address public immutable override factory;\n    address public immutable override operator;\n    string public override name;\n    uint256 public immutable override maxCapacity;\n    uint256 public immutable override minCapacity;\n    uint256 public override oraclePrice;\n    uint256 public immutable override startTime;\n    uint256 public immutable override stageTime;\n    uint256 public immutable override endTime;\n    uint24 public immutable override fee;\n    uint24 public immutable override interestRate;\n\n    mapping(address => uint256) public override pooledAmt;\n    mapping(address => uint256) public override restakeAmt;\n    mapping(address => bool) public override claimed;\n\n    uint256 public override funded = 0;\n    uint256 public override exited = 0;\n    uint256 public override restaked = 0;\n\n    string public override collateralDocument;\n    string public override collateralHash;\n\n    enum PoolState { Created, Opened, Active, Reverted, Liquidated, Dishonored }\n\n    PoolState private poolState = PoolState.Created;\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"InvestorV1Pool: not operator\");\n        _;\n    }\n    \n    constructor() {\n        ( \n            factory, \n            operator, \n            name, \n            maxCapacity, \n            minCapacity\n        ) = IInvestorV1PoolDeployer(msg.sender).parameter1();\n        (\n            oraclePrice, \n            startTime, \n            stageTime, \n            endTime, \n            fee,\n            interestRate\n        ) = IInvestorV1PoolDeployer(msg.sender).parameter2();\n    }\n\n    function expectedRestakeRevenue(uint256 amount) public override view returns (uint256) {\n        if(amount == 0) return 0;\n\n        uint256 estimated = (10000 - fee);\n        uint256 added = restaked.add(amount);\n        estimated = estimated * (10000 + interestRate);\n        estimated = exited.mul(estimated);\n        estimated = estimated.div(100000000);\n        estimated = estimated.mul(amount);\n        estimated = estimated.div(added);\n\n        return estimated;\n    }\n\n    function getPoolState() public override view returns (string memory) {\n        if (poolState == PoolState.Opened) return \"Opened\";\n        if (poolState == PoolState.Active) return \"Active\";\n        if (poolState == PoolState.Created) return \"Created\";\n        if (poolState == PoolState.Dishonored) return \"Dishonored\";\n        if (poolState == PoolState.Liquidated) return \"Liquidated\";\n        if (poolState == PoolState.Reverted) return \"Reverted\";\n        return \"Impossible\";\n    }\n\n    // State Update\n    function update() public override returns (bool) {\n        if(poolState == PoolState.Opened && block.timestamp > stageTime) {\n            if(funded >= minCapacity) { \n                poolState = PoolState.Active; \n                exited = maxCapacity - funded;\n                emit PoolActiviated(funded);\n            }\n            else { \n                poolState = PoolState.Reverted; \n                emit PoolReverted(minCapacity, funded);\n            }\n            return true;\n        }\n\n        if(poolState == PoolState.Active && block.timestamp > endTime) {\n            uint256 liquidityFund = IERC20(USDT).balanceOf(address(this));\n            uint256 estimated = (10000 - fee);\n            estimated = estimated * (10000 + interestRate);\n            if(exited > 0 && restaked == 0) estimated = funded.mul(estimated);\n            else estimated = maxCapacity.mul(estimated);\n            estimated = estimated.div(100000000);\n            if(liquidityFund >= estimated) { \n                poolState = PoolState.Liquidated; \n                emit PoolLiquidated(liquidityFund);\n            }\n            else { \n                poolState = PoolState.Dishonored; \n                emit PoolDishonored(estimated, liquidityFund);\n            }\n        }\n\n        return true;\n    }\n\n    function setOraclePrice(uint256 _oraclePrice) public override onlyOperator returns (bool) {\n        update();\n\n        require(poolState == PoolState.Opened \n            || poolState == PoolState.Created, \"InvestorV1Pool: pool not open\");\n        require(_oraclePrice != oraclePrice, \"InvestorV1Pool: oraclePrice not changed\");\n\n         uint256 minDeposit = maxCapacity.div(_oraclePrice);\n        if (maxCapacity.mod(_oraclePrice) != 0) { minDeposit = minDeposit.add(1); }\n        minDeposit = minDeposit.mul(10**12);\n\n        if(oraclePrice > _oraclePrice) {\n            minDeposit = minDeposit.sub(IERC20(HSF).balanceOf(address(this)));\n            oraclePrice = _oraclePrice;\n\n            IERC20(HSF).safeTransferFrom(msg.sender, address(this), minDeposit);\n            emit Deposit(HSF, msg.sender, minDeposit);\n        }\n        else {\n            uint256 operatorDeposits = IERC20(HSF).balanceOf(address(this));\n            minDeposit = operatorDeposits.sub(minDeposit);\n            oraclePrice = _oraclePrice;\n\n            IERC20(HSF).safeTransfer(msg.sender, minDeposit);\n            emit Withdrawal(HSF, msg.sender, msg.sender, minDeposit);\n        }\n\n        emit OraclePriceChanged(_oraclePrice);\n\n        return true;\n    }\n    \n    function rescue(address target) public override onlyOperator returns (bool) {\n        require(target != USDT && target != HSF, \"InvestorV1Pool: USDT and HSF cannot be rescued\");\n        require(IERC20(target).balanceOf(address(this)) > 0, \"InvestorV1Pool: no target token here\");\n\n        IERC20(target).safeTransfer(msg.sender, IERC20(target).balanceOf(address(this)));\n\n        emit Withdrawal(target, msg.sender, msg.sender, IERC20(target).balanceOf(address(this)));\n\n        return true;\n    }\n\n    function pullDeposit() public override onlyOperator returns (bool) {\n        update();\n\n        require(poolState == PoolState.Active, \"InvestorV1Pool: pool not active\");\n\n        uint256 pooledTotal = IERC20(USDT).balanceOf(address(this));\n        IERC20(USDT).safeTransfer(msg.sender, pooledTotal);\n\n        emit Withdrawal(USDT, msg.sender, msg.sender, pooledTotal);\n\n        return true;\n    }\n\n    function liquidate() public override onlyOperator returns (bool) {\n        update();\n\n        require(poolState == PoolState.Active, \"InvestorV1Pool: pool not active\");\n        uint256 estimated = (10000 - fee);\n        estimated = estimated * (10000 + interestRate);\n\n        if(exited > 0 && restaked == 0) estimated = funded.mul(estimated);\n        else estimated = maxCapacity.mul(estimated);\n        \n        estimated = estimated.div(100000000);\n\n        uint256 currentBalance = IERC20(USDT).balanceOf(address(this));\n\n        if(estimated <= currentBalance) return true;\n\n        IERC20(USDT).safeTransferFrom(msg.sender, address(this), estimated.sub(currentBalance));\n\n        emit Deposit(USDT, msg.sender, estimated.sub(currentBalance));\n\n        return true;\n    }\n\n    function openPool() public override onlyOperator returns (bool) {\n        update();\n\n        require(poolState == PoolState.Created, \"InvestorV1Pool: not create state\");\n\n        uint256 minDeposit = maxCapacity.div(oraclePrice);\n        if (maxCapacity.mod(oraclePrice) != 0) { minDeposit = minDeposit.add(1); }\n        minDeposit = minDeposit.mul(10**12);\n\n        poolState = PoolState.Opened;\n\n        IERC20(HSF).safeTransferFrom(msg.sender, address(this), minDeposit);\n\n        emit Deposit(HSF, msg.sender, minDeposit);\n        emit PoolOpened(msg.sender, startTime, minDeposit);\n\n        return true;\n    }\n    function closePool() public override onlyOperator returns (bool) {\n        update();\n\n        require(poolState == PoolState.Liquidated, \"InvestorV1Pool: pool not finalized\");\n\n        uint256 stakedAmt = IERC20(HSF).balanceOf(address(this));\n        IERC20(HSF).safeTransfer(msg.sender, stakedAmt);\n\n        emit Withdrawal(HSF, msg.sender, msg.sender, stakedAmt);\n\n        return true;\n    }\n    function revertPool() public override onlyOperator returns (bool) {\n        update();\n\n        require(poolState == PoolState.Opened \n            || poolState == PoolState.Created, \"InvestorV1Pool: not revertable state\");\n\n        poolState = PoolState.Reverted;\n\n        uint256 operatorDeposits = IERC20(HSF).balanceOf(address(this));\n        IERC20(HSF).safeTransfer(msg.sender, operatorDeposits);\n\n        emit Withdrawal(HSF, msg.sender, msg.sender, operatorDeposits);\n        emit PoolReverted(minCapacity, funded);\n\n        return true;\n    }\n\n    function deposit(uint256 amount) public override returns (bool) {\n        update();\n\n        require(poolState == PoolState.Opened, \"InvestorV1Pool: pool not opened\");\n        require(block.timestamp >= startTime, \"InvestorV1Pool: not started yet\");\n        require(amount > 0, \"InvestorV1Pool: amount is zero\");\n        require(funded.add(amount) <= maxCapacity, \"InvestorV1Pool: deposit over capacity\");\n\n        pooledAmt[msg.sender] = pooledAmt[msg.sender].add(amount);\n        funded = funded.add(amount);\n\n        IERC20(USDT).safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(USDT, msg.sender, amount);\n\n        return true;\n    }\n\n    function withdraw(uint256 amount, address to) public override returns (bool) {\n        update();\n\n        require(poolState == PoolState.Opened || poolState == PoolState.Reverted, \"InvestorV1Pool: pool not opened\");\n        require(block.timestamp >= startTime, \"InvestorV1Pool: not started yet\");\n        require(pooledAmt[msg.sender] >= amount, \"InvestorV1Pool: not enough deposit\");\n        require(to != address(0), \"InvestorV1Pool: to address is zero\");\n\n        pooledAmt[msg.sender] = pooledAmt[msg.sender].sub(amount);\n        funded = funded.sub(amount);\n\n        IERC20(USDT).safeTransfer(to, amount);\n\n        emit Withdrawal(USDT, msg.sender, to, amount);\n\n        return true;\n    }\n\n    function exit(uint256 amount, address to) public override returns (bool) {\n        update();\n\n        require(poolState == PoolState.Active || poolState == PoolState.Dishonored, \"InvestorV1Pool: pool not active\");\n        require(pooledAmt[msg.sender] >= amount, \"InvestorV1Pool: not enough deposit\");\n        require(to != address(0), \"InvestorV1Pool: to address is zero\");\n\n        pooledAmt[msg.sender] = pooledAmt[msg.sender].sub(amount);\n        exited = exited.add(amount);\n\n        uint256 exitAmt = amount.mul(10**12);\n        exitAmt = exitAmt.div(oraclePrice);\n\n        IERC20(HSF).safeTransfer(to, exitAmt);\n\n        emit Exited(msg.sender, to, exitAmt);\n\n        return true;\n    }\n\n    function claim(address to) public override returns (bool) {\n        update();\n\n        require(poolState == PoolState.Liquidated, \"InvestorV1Pool: pool not finalized\");\n        require(!claimed[msg.sender], \"InvestorV1Pool: already claimed\");\n        require(to != address(0), \"InvestorV1Pool: to address is zero\");\n\n        \n        uint256 liquidityTotal = (10000 - fee);\n        liquidityTotal = liquidityTotal * (10000 + interestRate);\n        liquidityTotal = maxCapacity.mul(liquidityTotal);\n        liquidityTotal = liquidityTotal.div(100000000);\n\n        uint256 poolClaim = 0;\n        uint256 restakeClaim = 0;\n\n        if(pooledAmt[msg.sender] > 0) {\n            poolClaim = liquidityTotal.mul(pooledAmt[msg.sender]);\n            poolClaim = poolClaim.div(maxCapacity);   \n        }\n\n        if(restakeAmt[msg.sender] > 0 && exited > 0) {\n            restakeClaim = liquidityTotal.mul(exited);\n            restakeClaim = restakeClaim.mul(restakeAmt[msg.sender]);\n            restakeClaim = restakeClaim.div(maxCapacity);\n            restakeClaim = restakeClaim.div(restaked);\n        }\n\n        claimed[msg.sender] = true;\n\n        require(poolClaim.add(restakeClaim) > 0, \"InvestorV1Pool: no claim for you\");\n\n        IERC20(USDT).safeTransfer(to, poolClaim.add(restakeClaim));\n\n        emit Claim(msg.sender, to, poolClaim.add(restakeClaim));\n\n        return true;\n\n    }\n\n    function restake(uint256 amount) public override returns (bool) {\n        update();\n\n        require(poolState == PoolState.Active, \"InvestorV1Pool: pool not active\");\n        require(exited > 0, \"InvestorV1Pool: no capacity for restake\");\n\n        restakeAmt[msg.sender] = restakeAmt[msg.sender].add(amount);\n        restaked = restaked.add(amount);\n\n        IERC20(HSF).safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(HSF, msg.sender, amount);\n\n        return true;\n\n    }\n\n    function unstake(uint256 amount, address to) public override returns (bool) {\n        update();\n\n        require(poolState == PoolState.Active || poolState == PoolState.Dishonored, \"InvestorV1Pool: pool not active\");\n        require(restakeAmt[msg.sender] >= amount, \"InvestorV1Pool: not enough restake\");\n        require(to != address(0), \"InvestorV1Pool: to address is zero\");\n\n        restakeAmt[msg.sender] = restakeAmt[msg.sender].sub(amount);\n        restaked = restaked.sub(amount);\n\n        IERC20(HSF).safeTransfer(to, amount);\n\n        emit Withdrawal(HSF, msg.sender, to, amount);\n\n        return true;\n    }\n\n\n}"
    },
    "contracts/interfaces/IInvestorV1Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport './IInvestorV1PoolImmutables.sol';\nimport './IInvestorV1PoolState.sol';\nimport './IInvestorV1PoolDerivedState.sol';\nimport './IInvestorV1PoolActions.sol';\nimport './IInvestorV1PoolOperatorActions.sol';\nimport './IInvestorV1PoolEvents.sol';\n\ninterface IInvestorV1Pool is \n    IInvestorV1PoolImmutables,\n    IInvestorV1PoolState,\n    IInvestorV1PoolDerivedState,\n    IInvestorV1PoolActions,\n    IInvestorV1PoolOperatorActions,\n    IInvestorV1PoolEvents \n{\n\n}"
    },
    "contracts/interfaces/IInvestorV1PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolDeployer {\n    \n    function parameter1()\n        external\n        view\n        returns (\n            address factory,\n            address operator,\n            string memory name,\n            uint256 maxCapacity,\n            uint256 minCapacity\n        );\n\n    function parameter2()\n        external\n        view\n        returns (\n            uint256 oraclePrice,\n            uint256 startTime,\n            uint256 stageTime,\n            uint256 endTime,\n            uint24 fee,\n            uint24 interestRate\n        );\n}"
    },
    "contracts/interfaces/IInvestorV1PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolImmutables {\n    function factory() external view returns (address);\n    function operator() external view returns (address);\n    function name() external view returns (string memory);\n    function maxCapacity() external view returns (uint256);\n    function minCapacity() external view returns (uint256);\n    function startTime() external view returns (uint256);\n    function stageTime() external view returns (uint256);\n    function endTime() external view returns (uint256);\n    function fee() external view returns (uint24);\n    function interestRate() external view returns (uint24);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolState {\n    function funded() external view returns (uint256);\n    function exited() external view returns (uint256);\n    function restaked() external view returns (uint256);\n    function oraclePrice() external view returns (uint256);\n    function getPoolState() external view returns (string memory);\n    function pooledAmt(address user) external view returns (uint256);\n    function restakeAmt(address user) external view returns (uint256);\n    function claimed(address user) external view returns (bool);\n    function collateralDocument() external view returns (string memory);\n    function collateralHash() external view returns (string memory);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolDerivedState {\n    function expectedRestakeRevenue(uint256 amount) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolActions {\n    function update() external returns (bool);\n    function deposit(uint256 amount) external returns (bool);\n    function withdraw(uint256 amount, address to) external returns (bool);\n    function exit(uint256 amount, address to) external returns (bool);\n    function claim(address to) external returns (bool);\n    function restake(uint256 amount) external returns (bool);\n    function unstake(uint256 amount, address to) external returns (bool);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolOperatorActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolOperatorActions {\n    function setOraclePrice(uint256 _oraclePrice) external returns (bool);\n    function rescue(address target) external returns (bool);\n    function pullDeposit() external returns (bool);\n    function liquidate() external returns (bool);\n    function openPool() external returns (bool);\n    function closePool() external returns (bool);\n    function revertPool() external returns (bool);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolEvents {\n    event PoolOpened(address operator, uint256 startTime, uint256 tokenDeposit);\n    event PoolActiviated(uint256 funded);\n    event PoolLiquidated(uint256 liquidityFund);\n    event PoolDishonored(uint256 requiredFund, uint256 liquidityFund);\n    event PoolReverted(uint256 minCapacity, uint256 funded);\n\n    event OraclePriceChanged(uint256 oraclePrice);\n    event ColletralHashChanged(string oldHash, string newHash);\n    event ColletralLinkChanged(string oldLink, string newLink);\n\n    event Deposit(address token, address from, uint256 amount);\n    event Withdrawal(address token, address from, address to, uint256 amount);\n    event Claim(address from, address to, uint256 amount);\n    event Exited(address from, address to, uint256 amount);\n}"
    },
    "contracts/InvestorV1PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport './interfaces/IInvestorV1PoolDeployer.sol';\n\nimport './InvestorV1Pool.sol';\n\ncontract InvestorV1PoolDeployer is IInvestorV1PoolDeployer {\n    struct Parameter1 {\n        address factory;\n        address operator;\n        string  name;\n        uint256 maxCapacity;\n        uint256 minCapacity;\n    }\n\n    struct Parameter2 {\n        uint256 oraclePrice;\n        uint256 startTime;\n        uint256 stageTime;\n        uint256 endTime;\n        uint24  fee;\n        uint24  interestRate;\n    }\n\n    Parameter1 public override parameter1;\n    Parameter2 public override parameter2;\n\n    function deploy(\n        address factory,\n        address operator,\n        string memory name,\n        uint256 maxCapacity,\n        uint256 minCapacity,\n        uint256 oraclePrice,\n        uint256 startTime,\n        uint256 stageTime,\n        uint256 endTime,\n        uint24 fee,\n        uint24 interestRate\n    ) internal returns (address pool) {\n        parameter1 = Parameter1({\n            factory: factory, \n            operator: operator, \n            name: name, \n            maxCapacity: maxCapacity, \n            minCapacity: minCapacity\n        });\n        parameter2 = Parameter2({\n            oraclePrice: oraclePrice,\n            startTime: startTime,\n            stageTime: stageTime,\n            endTime: endTime,\n            fee: fee,\n            interestRate: interestRate\n        });\n        pool = address(new InvestorV1Pool{salt: keccak256(abi.encode(operator, name, startTime))}());\n        delete parameter1;\n        delete parameter2;\n    }\n}"
    },
    "contracts/InvestorV1Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport './interfaces/IInvestorV1Factory.sol';\n\nimport './InvestorV1PoolDeployer.sol';\nimport './InvestorV1Pool.sol';\nimport './NoDelegateCall.sol';\n\ncontract InvestorV1Factory is IInvestorV1Factory, InvestorV1PoolDeployer, NoDelegateCall {\n    address public override owner;\n    address[] public override poolList;\n    mapping(address => mapping(string => mapping(uint256 => address))) public override getPool;\n\n    constructor() {\n        owner = msg.sender;\n        emit OwnerChanged(address(0), msg.sender);\n    }\n\n    function createPool(\n        address operator,\n        string memory name,\n        uint256 maxCapacity,\n        uint256 minCapacity,\n        uint256 oraclePrice,\n        uint256 startTime,\n        uint256 stageTime,\n        uint256 endTime,\n        uint24 fee,\n        uint24 interestRate\n    ) external override noDelegateCall returns (address pool) {\n        require(msg.sender == owner, \"InvestorV1Factory: not owner\");\n        require(operator != address(0), \"InvestorV1Factory: operator is zero address\");\n        require(maxCapacity > 0, \"InvestorV1Factory: maxCapacity is zero\");\n        require(startTime > block.timestamp, \"InvestorV1Factory: startTime before now\");\n        require(startTime < endTime, \"InvestorV1Factory: startTime after endTime\");\n        require(startTime < stageTime, \"InvestorV1Factory: startTime after stageTime\");\n        require(stageTime < endTime, \"InvestorV1Factory: stageTime after endTime\");\n        require(fee < 10000, \"InvestorV1Factory: fee over 10000\");\n        require(oraclePrice > 0, \"InvestorV1Factory: zero oraclePrice\");\n        require(getPool[operator][name][startTime] == address(0), \"InvestorV1Factory: pool exists\");\n        pool = deploy(\n            address(this),\n            operator,\n            name,\n            maxCapacity,\n            minCapacity,\n            oraclePrice,\n            startTime,\n            stageTime,\n            endTime,\n            fee,\n            interestRate\n        );\n        getPool[operator][name][startTime] = pool;\n        poolList.push(pool);\n\n        emit PoolCreated(operator,name,maxCapacity,minCapacity,startTime,stageTime,endTime,fee,interestRate,pool);\n    }\n\n    function setOwner(address _owner) external override {\n        require(msg.sender == owner, \"InvestorV1Factory: not owner\");\n        emit OwnerChanged(owner, _owner);\n        owner = _owner;\n    }\n}"
    },
    "contracts/interfaces/IInvestorV1Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1Factory {\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    event PoolCreated(\n        address operator,\n        string name,\n        uint256 maxCapacity,\n        uint256 minCapacity,\n        uint256 startTime,\n        uint256 stageTime,\n        uint256 endTime,\n        uint24 fee,\n        uint24 interestRate,\n        address pool\n    );\n\n    function owner() external view returns (address); \n\n    function poolList(uint256 index) external view returns (address);\n\n    function getPool(\n        address operator,\n        string memory name,\n        uint256 startTime\n    ) external view returns (address pool);\n\n    function createPool(\n        address operator,\n        string memory name,\n        uint256 maxCapacity,\n        uint256 minCapacity,\n        uint256 oraclePrice,\n        uint256 startTime,\n        uint256 stageTime,\n        uint256 endTime,\n        uint24 fee,\n        uint24 interestRate\n    ) external returns (address pool);\n\n    function setOwner(address _owner) external;\n}"
    },
    "contracts/NoDelegateCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nabstract contract NoDelegateCall {\n    address private immutable original;\n\n    constructor() {\n        original = address(this);\n    }\n\n    function checkNotDelegateCall() private view {\n        require(address(this) == original);\n    }\n\n    modifier noDelegateCall() {\n        checkNotDelegateCall();\n        _;\n    }\n}"
    },
    "contracts/TokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract TokenVesting {\n    using SafeMath for uint;\n    \n    address public hsf;\n    address public recipient;\n    uint public vestingAmount;\n    uint public vestingBegin;\n    uint public vestingCliff;\n    uint public vestingEnd;\n\n    uint public lastUpdate;\n    \n    event TokenClaimed(uint amount);\n\n    constructor(\n        address hsf_,\n        address recipient_,\n        uint vestingAmount_,\n        uint vestingBegin_,\n        uint vestingCliff_,\n        uint vestingEnd_\n    ) {\n        require(vestingBegin_ >= block.timestamp, 'TokenVesting::constructor: vesting begin too early');\n        require(vestingCliff_ >= vestingBegin_, 'TokenVesting::constructor: cliff is too early');\n        require(vestingEnd_ > vestingCliff_, 'TokenVesting::constructor: end is too early');\n\n        hsf = hsf_;\n        recipient = recipient_;\n\n        vestingAmount = vestingAmount_;\n        vestingBegin = vestingBegin_;\n        vestingCliff = vestingCliff_;\n        vestingEnd = vestingEnd_;\n        lastUpdate = vestingBegin;\n    }\n\n    function setRecipient(address recipient_) public {\n        require(msg.sender == recipient, 'TokenVesting::setRecipient: unauthorized');\n        recipient = recipient_;\n    }\n\n    function claim() public {\n        require(block.timestamp >= vestingCliff, 'TokenVesting::claim: not time yet');\n        uint amount;\n        if (block.timestamp >= vestingEnd) {\n            amount = IHsf(hsf).balanceOf(address(this));\n        } else {\n            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\n            lastUpdate = block.timestamp;\n        }\n        IHsf(hsf).transfer(recipient, amount);\n        emit TokenClaimed(amount);\n    }\n}\n\ninterface IHsf {\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address _to, uint _value) external returns (bool);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}